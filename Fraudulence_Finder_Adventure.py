import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Sample dataset creation for fraud detection\ndef create_sample_data():\n    data = {\n        'transaction_id': range(1, 101),\n        'amount': np.random.randint(1, 1000, size=100),\n        'is_fraud': np.random.choice([0, 1], size=100, p=[0.9, 0.1])\n    }\n    return pd.DataFrame(data)\n\n# Load data\n@st.cache\ndef load_data():\n    return create_sample_data()\n\n# Main function to run the app\ndef main():\n    st.title('Fraud Detection Case Study')\n    st.write('In this case study, we will learn how to detect fraudulent transactions using machine learning.')\n\n    # Load data\n    data = load_data()\n    st.write('Sample Data:', data.head())\n\n    # User input for tweaking parameters\n    st.sidebar.header('User Input Parameters')\n    test_size = st.sidebar.slider('Test Size (fraction)', 0.1, 0.5, 0.2)\n    n_estimators = st.sidebar.slider('Number of Trees in Random Forest', 10, 100, 50)\n\n    # Prepare data for training\n    X = data[['amount']]\n    y = data['is_fraud']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)\n\n    # Train model\n    model = RandomForestClassifier(n_estimators=n_estimators, random_state=42)\n    model.fit(X_train, y_train)\n\n    # Predictions\n    predictions = model.predict(X_test)\n    st.write('Predictions:', predictions)\n\n    # Display results\n    st.subheader('Model Evaluation')\n    st.text(classification_report(y_test, predictions))\n    st.text('Confusion Matrix:')\n    st.write(confusion_matrix(y_test, predictions))\n\n    # Visualize results\n    plt.figure(figsize=(10, 5))\n    plt.title('Transaction Amount vs Fraud Detection')\n    plt.scatter(data['amount'], data['is_fraud'], alpha=0.5)\n    plt.xlabel('Transaction Amount')\n    plt.ylabel('Is Fraud')\n    st.pyplot(plt)\n\nif __name__ == '__main__':\n    main()\n