import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\n@st.cache\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Replace with your dataset\n    return data\n\n# Data preprocessing\ndef preprocess_data(data):\n    data = data.dropna()  # Handle missing values\n    X = data.drop('disease', axis=1)  # Features\n    y = data['disease']  # Target variable\n    return X, y\n\n# Train model\def train_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Main app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('This app predicts diseases based on user-input symptoms.')\n\n    # Load data\n    data = load_data()\n    st.write('Data Loaded Successfully!')\n    st.write(data.head())\n\n    # Preprocess data\n    X, y = preprocess_data(data)\n    st.write('Data Preprocessed!')\n\n    # Train model\n    model, X_test, y_test = train_model(X, y)\n    st.write('Model Trained!')\n\n    # User input for prediction\n    st.subheader('Input Symptoms')\n    symptom1 = st.number_input('Symptom 1 (scale 1-10)', min_value=1, max_value=10)\n    symptom2 = st.number_input('Symptom 2 (scale 1-10)', min_value=1, max_value=10)\n    symptom3 = st.number_input('Symptom 3 (scale 1-10)', min_value=1, max_value=10)\n    user_input = np.array([[symptom1, symptom2, symptom3]])\n\n    # Prediction\n    if st.button('Predict Disease'):\n        prediction = model.predict(user_input)\n        st.write(f'Predicted Disease: {prediction[0]}')\n\n    # Confusion Matrix\n    if st.button('Show Confusion Matrix'):\n        y_pred = model.predict(X_test)\n        cm = confusion_matrix(y_test, y_pred)\n        st.write('Confusion Matrix:')\n        st.write(cm)\n        fig, ax = plt.subplots()\n        ax.matshow(cm, cmap='Blues')\n        st.pyplot(fig)\n\nif __name__ == '__main__':\n    main()\n