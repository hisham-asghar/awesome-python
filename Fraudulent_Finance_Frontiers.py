import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    # Simulated dataset for fraud detection\n    data = {'TransactionID': range(1, 101), 'Amount': np.random.randint(10, 1000, 100), 'IsFraud': np.random.choice([0, 1], 100)}\n    df = pd.DataFrame(data)\n    return df\n\n# Function to train model\ndef train_model(df):\n    X = df[['Amount']]  # Features\n    y = df['IsFraud']  # Target\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Function to display results\ndef display_results(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    st.write('### Model Performance')\n    st.text(classification_report(y_test, y_pred))\n    st.write('### Confusion Matrix')\n    cm = confusion_matrix(y_test, y_pred)\n    st.write(cm)\n    st.bar_chart(cm)\n\n# Streamlit app\ndef main():\n    st.title('Fraud Detection Case Study')\n    st.write('In this case study, we will explore how to detect fraudulent transactions using a machine learning model.')\n    df = load_data()\n    st.write('### Transaction Data')\n    st.write(df)\n    if st.button('Train Model'):  # Button to train model\n        model, X_test, y_test = train_model(df)\n        display_results(model, X_test, y_test)\n    st.write('### Experiment with Transaction Amount')\n    amount = st.number_input('Enter a transaction amount to predict fraud:', min_value=10, max_value=1000, value=100)\n    if st.button('Predict Fraud'):\n        prediction = model.predict([[amount]])\n        st.write('Fraud Prediction (1 = Fraud, 0 = Not Fraud):', prediction[0])\n\nif __name__ == '__main__':\n    main()\n