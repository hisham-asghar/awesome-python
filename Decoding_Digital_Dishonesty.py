import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    url = 'https://raw.githubusercontent.com/yourusername/fake_news_dataset/main/data.csv'  # Replace with your dataset URL\n    data = pd.read_csv(url)\n    return data\n\n# Preprocess data\ndef preprocess_data(data):\n    data['label'] = data['label'].map({'fake': 0, 'real': 1})\n    X = data['text']\n    y = data['label']\n    return X, y\n\n# Train model\ndef train_model(X_train, y_train):\n    model = RandomForestClassifier(n_estimators=100)\n    model.fit(X_train, y_train)\n    return model\n\n# Predict and evaluate\ndef predict_and_evaluate(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    st.write('Confusion Matrix:')\n    st.write(confusion_matrix(y_test, y_pred))\n    st.write('Classification Report:')\n    st.write(classification_report(y_test, y_pred))\n\n# Main function\ndef main():\n    st.title('Fake News Detection with NLP')\n    st.write('In this case study, we will detect fake news articles using Natural Language Processing and Machine Learning.')\n\n    # Load and preprocess data\n    data = load_data()\n    X, y = preprocess_data(data)\n\n    # Split data\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    # Train model\n    model = train_model(X_train, y_train)\n\n    # Predict and evaluate\n    predict_and_evaluate(model, X_test, y_test)\n\n    # User input for prediction\n    user_input = st.text_area('Enter a news article to classify:')\n    if st.button('Predict'):\n        prediction = model.predict([user_input])\n        result = 'Fake' if prediction[0] == 0 else 'Real'\n        st.write(f'The article is classified as: {result}')\n\nif __name__ == '__main__':\n    main()