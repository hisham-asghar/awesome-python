import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndata = pd.read_csv('healthcare_data.csv')  # Replace with your dataset\n\n# Display the dataset\nst.title('Disease Prediction from Symptoms')\nst.write(data.head())\n\n# User input for symptoms\nst.sidebar.header('User Input Symptoms')\nfever = st.sidebar.slider('Fever', 0, 1, 0)\ncough = st.sidebar.slider('Cough', 0, 1, 0)\nbreathlessness = st.sidebar.slider('Breathlessness', 0, 1, 0)\nheadache = st.sidebar.slider('Headache', 0, 1, 0)\n\n# Prepare the input data for prediction\ninput_data = np.array([[fever, cough, breathlessness, headache]])\n\n# Preprocess the data\nX = data.drop('Disease', axis=1)\nY = data['Disease']\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n\n# Train the model\nmodel = RandomForestClassifier()\nmodel.fit(X_train, Y_train)\n\n# Make predictions\nprediction = model.predict(input_data)\n\n# Display the prediction result\nst.write('Predicted Disease:', prediction[0])\n\n# Show model performance metrics\nif st.button('Show Model Performance'):  \n    Y_pred = model.predict(X_test)\n    st.write('Confusion Matrix:', confusion_matrix(Y_test, Y_pred))\n    st.write('Classification Report:', classification_report(Y_test, Y_pred))\n    st.subheader('Feature Importance')\n    feature_importance = model.feature_importances_\n    features = X.columns\n    plt.barh(features, feature_importance)\n    plt.xlabel('Feature Importance')\n    st.pyplot()\n\n# Mini-experiment: Tweak parameters\nst.sidebar.header('Tweak Model Parameters')\nn_estimators = st.sidebar.slider('Number of Estimators', 10, 200, 100)\nmodel = RandomForestClassifier(n_estimators=n_estimators)\nmodel.fit(X_train, Y_train)\nprediction = model.predict(input_data)\nst.write('Predicted Disease with {} Estimators:'.format(n_estimators), prediction[0])\n