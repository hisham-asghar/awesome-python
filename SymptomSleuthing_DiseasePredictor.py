import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\n@st.cache\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Placeholder for actual dataset\n    return data\n\n# Preprocess data\ndef preprocess_data(data):\n    data = data.dropna()  # Remove missing values\n    X = data.drop('disease', axis=1)  # Features\n    y = data['disease']  # Target\n    return X, y\n\n# Train model\ndef train_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Main function\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('This application predicts diseases based on user input symptoms.')\n\n    data = load_data()\n    X, y = preprocess_data(data)\n\n    if st.button('Train Model'):\n        model, X_test, y_test = train_model(X, y)\n        st.success('Model trained successfully!')\n\n        # Display confusion matrix\n        y_pred = model.predict(X_test)\n        cm = confusion_matrix(y_test, y_pred)\n        st.write('Confusion Matrix:')\n        st.write(cm)\n\n        # Display classification report\n        report = classification_report(y_test, y_pred)\n        st.text(report)\n\n    st.write('Please enter your symptoms:')\n    symptom1 = st.number_input('Symptom 1 (0 or 1):', 0, 1)\n    symptom2 = st.number_input('Symptom 2 (0 or 1):', 0, 1)\n    symptom3 = st.number_input('Symptom 3 (0 or 1):', 0, 1)\n    symptoms = np.array([[symptom1, symptom2, symptom3]])\n\n    if st.button('Predict Disease'):\n        prediction = model.predict(symptoms)\n        st.write(f'Predicted Disease: {prediction[0]}')\n\nif __name__ == '__main__':\n    main()\n