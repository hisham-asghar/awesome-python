import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Replace with your dataset\n    return data\n\n# Preprocess data\ndef preprocess_data(data):\n    data.fillna(0, inplace=True)  # Simple imputation\n    X = data.drop('Disease', axis=1)  # Features\n    y = data['Disease']  # Target\n    return X, y\n\n# Train model\ndef train_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Evaluate model\ndef evaluate_model(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    st.write('Classification Report:', classification_report(y_test, y_pred))\n    st.write('Confusion Matrix:', confusion_matrix(y_test, y_pred))\n    return y_pred\n\n# Streamlit app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('This app predicts diseases based on input symptoms.')\n\n    data = load_data()\n    X, y = preprocess_data(data)\n    model, X_test, y_test = train_model(X, y)\n\n    st.subheader('Input Symptoms')\n    symptoms = st.text_input('Enter symptoms separated by commas:')\n    if symptoms:\n        input_data = np.array([symptoms.split(',')]).astype(float)\n        prediction = model.predict(input_data)\n        st.write('Predicted Disease:', prediction)\n\n    st.subheader('Model Evaluation')\n    if st.button('Evaluate Model'):\n        evaluate_model(model, X_test, y_test)\n\nif __name__ == '__main__':\n    main()\n