import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Replace with your dataset\n    return data\n\n# Preprocess data\ndef preprocess_data(data):\n    # Simple preprocessing steps\n    data.fillna(0, inplace=True)\n    X = data.drop('disease', axis=1)  # Features\n    y = data['disease']  # Target\n    return X, y\n\n# Train model\ndef train_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Evaluate model\ndef evaluate_model(model, X_test, y_test):\n    predictions = model.predict(X_test)\n    report = classification_report(y_test, predictions)\n    cm = confusion_matrix(y_test, predictions)\n    return report, cm\n\n# Visualize results\ndef visualize_results(cm):\n    plt.figure(figsize=(10,7))\n    sns.heatmap(cm, annot=True, fmt='d')\n    plt.title('Confusion Matrix')\n    plt.xlabel('Predicted')\n    plt.ylabel('True')\n    plt.show()\n\n# Streamlit app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('This app predicts diseases based on user input symptoms.')\n\n    # Load and preprocess data\n    data = load_data()\n    X, y = preprocess_data(data)\n\n    # Train model\n    model, X_test, y_test = train_model(X, y)\n\n    # Evaluate model\n    report, cm = evaluate_model(model, X_test, y_test)\n    st.text(report)\n    visualize_results(cm)\n\n    # User input for prediction\n    st.subheader('Input Symptoms')\n    symptom1 = st.number_input('Symptom 1 Severity (0-10)', 0, 10)\n    symptom2 = st.number_input('Symptom 2 Severity (0-10)', 0, 10)\n    # Add more symptoms as needed\n\n    if st.button('Predict Disease'):\n        user_input = np.array([[symptom1, symptom2]])  # Adjust based on features\n        prediction = model.predict(user_input)\n        st.write(f'Predicted Disease: {prediction[0]}')\n\nif __name__ == '__main__':\n    main()\n