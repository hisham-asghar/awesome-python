import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Sample data generation function\ndef generate_data(num_samples=1000):\n    np.random.seed(42)\n    data = pd.DataFrame({\n        'age': np.random.randint(18, 70, size=num_samples),\n        'income': np.random.randint(20000, 120000, size=num_samples),\n        'symptom1': np.random.randint(0, 2, size=num_samples),\n        'symptom2': np.random.randint(0, 2, size=num_samples),\n        'disease': np.random.randint(0, 2, size=num_samples)\n    })\n    return data\n\n# Load data\ndata = generate_data()\n\n# Streamlit UI\nst.title('Disease Prediction Model')\n\n# User inputs\nnum_samples = st.slider('Select number of samples to generate:', 100, 2000, 1000)\ndata = generate_data(num_samples)\n\n# Display data\nst.write('Generated Data:', data.head())\n\n# Feature selection\nX = data[['age', 'income', 'symptom1', 'symptom2']]\ny = data['disease']\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Model training\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\n# Predictions\ny_pred = model.predict(X_test)\n\n# Display results\nst.write('Classification Report:', classification_report(y_test, y_pred))\n\n# Confusion Matrix\ncm = confusion_matrix(y_test, y_pred)\nfig, ax = plt.subplots()\nax.matshow(cm, cmap='Blues', alpha=0.5)\nfor (i, j), val in np.ndenumerate(cm):\n    ax.text(j, i, val, ha='center', va='center')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Confusion Matrix')\nst.pyplot(fig)\n\n# Mini-experiment\nst.subheader('Mini-Experiment: Tweak Inputs')\nage = st.slider('Select Age:', 18, 70, 30)\nincome = st.slider('Select Income:', 20000, 120000, 50000)\nsymptom1 = st.selectbox('Symptom 1 Present?', [0, 1])\nsymptom2 = st.selectbox('Symptom 2 Present?', [0, 1])\n\n# Predict disease based on user input\ninput_data = np.array([[age, income, symptom1, symptom2]])\nprediction = model.predict(input_data)\n\n# Display prediction\nst.write('Predicted Disease Status (0: No Disease, 1: Disease):', prediction[0])\n