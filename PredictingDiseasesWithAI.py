import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Replace with your dataset path\n    return data\n\n# Preprocess data\ndef preprocess_data(data):\n    data = data.dropna()  # Simple preprocessing\n    X = data.drop('disease', axis=1)  # Features\n    y = data['disease']  # Target variable\n    return X, y\n\n# Train model\ndef train_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Evaluate model\ndef evaluate_model(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    report = classification_report(y_test, y_pred)\n    cm = confusion_matrix(y_test, y_pred)\n    return report, cm\n\n# Streamlit app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('This application predicts diseases based on user input symptoms.')\n\n    # Load and preprocess data\n    data = load_data()\n    X, y = preprocess_data(data)\n\n    # User input for symptoms\n    symptoms = st.text_input('Enter symptoms separated by commas:')\n    if symptoms:\n        symptoms_list = symptoms.split(',')\n        # Convert input to a suitable format for prediction\n        input_data = np.array(symptoms_list).reshape(1, -1)\n        model, X_test, y_test = train_model(X, y)\n        prediction = model.predict(input_data)\n        st.write(f'Predicted Disease: {prediction[0]}')\n\n        # Evaluate model\n        report, cm = evaluate_model(model, X_test, y_test)\n        st.write('Classification Report:')\n        st.text(report)\n        st.write('Confusion Matrix:')\n        st.write(cm)\n\nif __name__ == '__main__':\n    main()\n