import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndataset_url = 'https://raw.githubusercontent.com/yourusername/fake_news_dataset/main/news.csv'  # Replace with your dataset URL\ndf = pd.read_csv(dataset_url)\n\n# Display dataset information\nst.title('Fake News Detection with NLP')\nst.write('This application helps you detect fake news using a machine learning model.')\nst.write('Dataset contains news articles labeled as real or fake.')\nst.write(df.head())\n\n# Preprocessing\ndf['label'] = df['label'].map({'fake': 0, 'real': 1})\ndf['text'] = df['text'].astype(str)\n\n# User input for tweaking parameters\nmax_depth = st.slider('Select max depth of the model:', 1, 20, 10)\n\n# Splitting the dataset\nX = df['text']\ny = df['label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Vectorization using CountVectorizer\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nX_train_vectorized = vectorizer.fit_transform(X_train)\nX_test_vectorized = vectorizer.transform(X_test)\n\n# Model training\nmodel = RandomForestClassifier(max_depth=max_depth, random_state=42)\nmodel.fit(X_train_vectorized, y_train)\n\n# Predictions\ny_pred = model.predict(X_test_vectorized)\n\n# Display results\nst.subheader('Model Performance')\nst.write('Confusion Matrix:')\nst.write(confusion_matrix(y_test, y_pred))\nst.write('Classification Report:')\nst.write(classification_report(y_test, y_pred))\n\n# Visualizing results\nlabels = ['Real', 'Fake']\ncm = confusion_matrix(y_test, y_pred)\nfig, ax = plt.subplots()\nax.matshow(cm, cmap=plt.cm.Blues)\nfor (i, j), z in np.ndenumerate(cm):\n    ax.text(j, i, z, ha='center', va='center')\nplt.title('Confusion Matrix')\nplt.xlabel('Predicted')\nplt.ylabel('True')\nst.pyplot(fig)\n\n# Mini-experiment\nst.subheader('Try your own text!')\nuser_input = st.text_area('Enter news article text:')\nif st.button('Predict'):\n    input_vectorized = vectorizer.transform([user_input])\n    prediction = model.predict(input_vectorized)\n    st.write('Prediction: ', 'Real' if prediction[0] == 1 else 'Fake')\n