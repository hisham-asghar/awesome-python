import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load the dataset\ndef load_data():\n    data = {'Symptoms': ['Fever', 'Cough', 'Fatigue', 'Loss of taste', 'Sore throat', 'Headache'],\n            'Disease': ['Flu', 'Flu', 'Flu', 'COVID-19', 'COVID-19', 'Flu'],\n            'Severity': [1, 1, 1, 3, 3, 1]}\n    df = pd.DataFrame(data)\n    return df\n\n# Train the model\ndef train_model(df):\n    X = df[['Severity']]\n    y = df['Disease']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Predict disease based on severity\ndef predict_disease(model, severity):\n    prediction = model.predict(np.array([[severity]]))\n    return prediction[0]\n\n# Streamlit app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('This application predicts diseases based on symptom severity.')\n\n    # Load data and train model\n    df = load_data()\n    model, X_test, y_test = train_model(df)\n\n    # User input for severity\n    severity = st.slider('Select Severity Level:', 1, 3, 1)\n    if st.button('Predict Disease'):\n        prediction = predict_disease(model, severity)\n        st.write(f'Predicted Disease: {prediction}')\n\n    # Display confusion matrix\n    if st.checkbox('Show Confusion Matrix'):\n        y_pred = model.predict(X_test)\n        cm = confusion_matrix(y_test, y_pred)\n        st.write('Confusion Matrix:')\n        st.write(cm)\n        st.bar_chart(cm)\n\nif __name__ == '__main__':\n    main()\n