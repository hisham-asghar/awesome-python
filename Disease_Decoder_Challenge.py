import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Replace with your dataset\n    return data\n\n# Preprocess data\ndef preprocess_data(data):\n    # Example preprocessing steps\n    data.dropna(inplace=True)\n    X = data.drop('disease', axis=1)  # Features\n    y = data['disease']  # Target\n    return X, y\n\n# Train model\ndef train_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Evaluate model\ndef evaluate_model(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    report = classification_report(y_test, y_pred)\n    return report, confusion_matrix(y_test, y_pred)\n\n# Streamlit app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('This app predicts diseases based on user input symptoms.')\n\n    data = load_data()\n    X, y = preprocess_data(data)\n\n    st.subheader('Input Symptoms')\n    symptom1 = st.number_input('Symptom 1 Severity (0-10)', min_value=0, max_value=10)\n    symptom2 = st.number_input('Symptom 2 Severity (0-10)', min_value=0, max_value=10)\n    symptom3 = st.number_input('Symptom 3 Severity (0-10)', min_value=0, max_value=10)\n    symptoms = np.array([[symptom1, symptom2, symptom3]])\n\n    if st.button('Predict Disease'):\n        model, X_test, y_test = train_model(X, y)\n        prediction = model.predict(symptoms)\n        st.write(f'Predicted Disease: {prediction[0]}')\n\n        report, cm = evaluate_model(model, X_test, y_test)\n        st.subheader('Model Evaluation')\n        st.text(report)\n        st.write('Confusion Matrix:')\n        st.write(cm)\n\n        # Plot confusion matrix\n        plt.figure(figsize=(8, 6))\n        plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n        plt.title('Confusion Matrix')\n        plt.colorbar()\n        tick_marks = np.arange(len(np.unique(y)))\n        plt.xticks(tick_marks, np.unique(y))\n        plt.yticks(tick_marks, np.unique(y))\n        plt.ylabel('True label')\n        plt.xlabel('Predicted label')\n        st.pyplot()\n\nif __name__ == '__main__':\n    main()\n