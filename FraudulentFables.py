import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    # Simulated data for fraud detection\n    data = {\n        'TransactionID': range(1, 101),\n        'Amount': np.random.randint(1, 1000, 100),\n        'IsFraud': np.random.choice([0, 1], 100, p=[0.9, 0.1])\n    }\n    return pd.DataFrame(data)\n\n# Function to train model\ndef train_model(data):\n    X = data[['Amount']]\n    y = data['IsFraud']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Function to visualize results\ndef visualize_results(y_test, y_pred):\n    cm = confusion_matrix(y_test, y_pred)\n    plt.figure(figsize=(8, 6))\n    plt.title('Confusion Matrix')\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n    plt.ylabel('Actual')\n    plt.xlabel('Predicted')\n    plt.show()\n\n# Streamlit app\ndef main():\n    st.title('Fraud Detection Case Study')\n    st.write('This application helps you understand how to detect fraudulent transactions using machine learning.')\n    data = load_data()\n    st.write('Loaded Data:')\n    st.dataframe(data)\n\n    if st.button('Train Model'):\n        model, X_test, y_test = train_model(data)\n        st.success('Model trained successfully!')\n        y_pred = model.predict(X_test)\n        st.write('Classification Report:')\n        st.text(classification_report(y_test, y_pred))\n        visualize_results(y_test, y_pred)\n        st.pyplot()\n\n    st.write('Adjust the parameters below to see how it affects the model.')\n    amount = st.slider('Transaction Amount', 1, 1000, 500)\n    if st.button('Predict Fraud'):\n        prediction = model.predict([[amount]])\n        if prediction[0] == 1:\n            st.warning('This transaction is likely fraudulent!')\n        else:\n            st.success('This transaction is likely legitimate.')\n\nif __name__ == '__main__':\n    main()\n