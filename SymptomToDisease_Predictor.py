import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Example dataset\n    return data\n\n# Preprocess data\ndef preprocess_data(data):\n    # Simple preprocessing steps\n    data.fillna(0, inplace=True)\n    return data\n\n# Train model\ndef train_model(X_train, y_train):\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model\n\n# Main function to run the app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('This application predicts diseases based on user input symptoms.')\n\n    # Load and preprocess data\n    data = load_data()\n    data = preprocess_data(data)\n\n    # User input for symptoms\n    symptoms = st.multiselect('Select Symptoms:', options=data.columns[1:])\n    if symptoms:\n        user_input = np.array([1 if symptom in symptoms else 0 for symptom in data.columns[1:]])\n        st.write('You selected:', symptoms)\n\n        # Prepare data for training\n        X = data.iloc[:, 1:].values\n        y = data.iloc[:, 0].values\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        # Train model\n        model = train_model(X_train, y_train)\n\n        # Make predictions\n        prediction = model.predict(user_input.reshape(1, -1))\n        st.write('Predicted Disease:', prediction[0])\n\n        # Show confusion matrix\n        y_pred = model.predict(X_test)\n        cm = confusion_matrix(y_test, y_pred)\n        st.write('Confusion Matrix:')\n        st.write(cm)\n\n        # Display classification report\n        report = classification_report(y_test, y_pred)\n        st.write('Classification Report:')\n        st.text(report)\n\nif __name__ == '__main__':\n    main()\n