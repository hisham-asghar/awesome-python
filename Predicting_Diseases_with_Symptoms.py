import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\n@st.cache\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Replace with your dataset path\n    return data\n\n# Preprocessing function\ndef preprocess_data(data):\n    # Simple preprocessing steps\n    data.fillna(0, inplace=True)\n    return data\n\n# Function to train the model\ndef train_model(X_train, y_train):\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model\n\n# Function to make predictions\ndef make_predictions(model, X_test):\n    return model.predict(X_test)\n\n# Streamlit app\ndef main():\n    st.title('Healthcare Disease Prediction')\n    st.write('This app predicts diseases based on symptoms.')\n\n    # Load and preprocess data\n    data = load_data()\n    data = preprocess_data(data)\n\n    # User input for symptoms\n    st.sidebar.header('User Input Symptoms')\n    symptom1 = st.sidebar.number_input('Symptom 1 Severity', min_value=0, max_value=10)\n    symptom2 = st.sidebar.number_input('Symptom 2 Severity', min_value=0, max_value=10)\n    symptom3 = st.sidebar.number_input('Symptom 3 Severity', min_value=0, max_value=10)\n\n    # Prepare input for prediction\n    user_input = np.array([[symptom1, symptom2, symptom3]])\n\n    # Split data into features and target\n    X = data[['symptom1', 'symptom2', 'symptom3']]\n    y = data['disease']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    # Train model\n    model = train_model(X_train, y_train)\n\n    # Make predictions\n    predictions = make_predictions(model, user_input)\n\n    # Display results\n    st.write('Predicted Disease:', predictions[0])\n\n    # Display confusion matrix and classification report\n    if st.checkbox('Show Model Evaluation Metrics'):\n        y_pred = make_predictions(model, X_test)\n        st.write('Confusion Matrix:', confusion_matrix(y_test, y_pred))\n        st.write('Classification Report:', classification_report(y_test, y_pred))\n\nif __name__ == '__main__':\n    main()\n