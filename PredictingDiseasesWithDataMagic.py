import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Sample data generation function\ndef generate_data(num_samples=1000):\n    np.random.seed(42)\n    data = {\n        'age': np.random.randint(18, 70, size=num_samples),\n        'income': np.random.randint(20000, 120000, size=num_samples),\n        'symptoms': np.random.choice(['fever', 'cough', 'fatigue', 'none'], size=num_samples),\n        'disease': np.random.choice(['flu', 'cold', 'none'], size=num_samples)\n    }\n    return pd.DataFrame(data)\n\n# Load data\n@st.cache\ndef load_data():\n    return generate_data()\n\n# Main function to run the app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('In this case study, we will predict diseases based on symptoms and user inputs.')\n\n    # Load data\n    data = load_data()\n    st.write('Sample Data:')\n    st.dataframe(data.head())\n\n    # User input for symptoms\n    st.sidebar.header('User Input Parameters')\n    age = st.sidebar.slider('Age', 18, 70, 30)\n    income = st.sidebar.slider('Income', 20000, 120000, 50000)\n    symptoms = st.sidebar.selectbox('Symptoms', ['fever', 'cough', 'fatigue', 'none'])\n\n    # Prepare data for model\n    data['symptoms'] = data['symptoms'].map({'fever': 1, 'cough': 2, 'fatigue': 3, 'none': 0})\n    data['disease'] = data['disease'].map({'flu': 1, 'cold': 2, 'none': 0})\n\n    X = data[['age', 'income', 'symptoms']]\n    y = data['disease']\n\n    # Split data\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    # Train model\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n\n    # Make predictions\n    user_input = np.array([[age, income, {'fever': 1, 'cough': 2, 'fatigue': 3, 'none': 0}[symptoms]]])\n    prediction = model.predict(user_input)\n\n    # Display results\n    disease_mapping = {0: 'none', 1: 'flu', 2: 'cold'}\n    st.write('Predicted Disease:', disease_mapping[prediction[0]])\n\n    # Show model performance\n    y_pred = model.predict(X_test)\n    st.write('Model Performance:')\n    st.text(classification_report(y_test, y_pred))\n    st.write('Confusion Matrix:')\n    st.write(confusion_matrix(y_test, y_pred))\n    st.bar_chart(pd.DataFrame(confusion_matrix(y_test, y_pred), columns=['Predicted Flu', 'Predicted Cold', 'Predicted None'], index=['Actual Flu', 'Actual Cold', 'Actual None']))\n\nif __name__ == '__main__':\n    main()\n