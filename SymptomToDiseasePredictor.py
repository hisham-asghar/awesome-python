import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndata = pd.read_csv('healthcare_data.csv')  # Replace with your dataset path\n\n# Display the dataset\nst.title('Disease Prediction from Symptoms')\nst.write(data.head())\n\n# User input for symptoms\nfever = st.slider('Fever (0 = No, 1 = Yes)', 0, 1)\ncough = st.slider('Cough (0 = No, 1 = Yes)', 0, 1)\nbreathlessness = st.slider('Breathlessness (0 = No, 1 = Yes)', 0, 1)\n\n# Prepare input for prediction\ninput_data = np.array([[fever, cough, breathlessness]])\n\n# Feature selection and model training\nX = data[['fever', 'cough', 'breathlessness']]\nY = data['disease']\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, Y_train)\n\n# Prediction\nif st.button('Predict Disease'):  # Button to trigger prediction\n    prediction = model.predict(input_data)\n    st.write('Predicted Disease:', prediction[0])\n\n# Display confusion matrix and classification report\nif st.button('Show Model Performance'):  # Button to show model performance\n    Y_pred = model.predict(X_test)\n    st.write('Confusion Matrix:')\n    st.write(confusion_matrix(Y_test, Y_pred))\n    st.write('Classification Report:')\n    st.text(classification_report(Y_test, Y_pred))\n\n# Visualizing feature importance\nif st.button('Show Feature Importance'):  # Button to show feature importance\n    feature_importances = model.feature_importances_\n    features = X.columns\n    plt.figure(figsize=(10, 6))\n    plt.barh(features, feature_importances)\n    plt.xlabel('Importance')\n    plt.title('Feature Importance')\n    st.pyplot()\n\n# Run the app\nif __name__ == '__main__':\n    st.run()