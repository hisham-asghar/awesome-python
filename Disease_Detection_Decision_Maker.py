import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load the dataset\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Placeholder for actual data\n    return data\n\n# Preprocess the data\ndef preprocess_data(data):\n    data.fillna(0, inplace=True)  # Simple imputation for missing values\n    X = data.drop('disease', axis=1)  # Features\n    y = data['disease']  # Target\n    return X, y\n\n# Train the model\ndef train_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Evaluate the model\ndef evaluate_model(model, X_test, y_test):\n    predictions = model.predict(X_test)\n    report = classification_report(y_test, predictions)\n    cm = confusion_matrix(y_test, predictions)\n    return report, cm\n\n# Visualize results\ndef visualize_results(cm):\n    plt.figure(figsize=(10, 7))\n    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\n    plt.title('Confusion Matrix')\n    plt.colorbar()\n    tick_marks = np.arange(len(np.unique(y)))\n    plt.xticks(tick_marks, np.unique(y))\n    plt.yticks(tick_marks, np.unique(y))\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.show()\n\n# Streamlit app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    data = load_data()\n    st.write('Data Preview:', data.head())\n    X, y = preprocess_data(data)\n    model, X_test, y_test = train_model(X, y)\n    report, cm = evaluate_model(model, X_test, y_test)\n    st.write('Classification Report:', report)\n    st.write('Confusion Matrix:', cm)\n    visualize_results(cm)\n\nif __name__ == '__main__':\n    main()\n