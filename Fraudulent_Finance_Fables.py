import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    # Simulated dataset for fraud detection\n    data = {'TransactionID': range(1, 101),\n            'Amount': np.random.randint(1, 1000, 100),\n            'IsFraud': np.random.choice([0, 1], 100, p=[0.9, 0.1])}\n    return pd.DataFrame(data)\n\n# Function to train model\ndef train_model(data):\n    X = data[['Amount']]\n    y = data['IsFraud']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Function to display results\ndef display_results(y_test, y_pred):\n    st.write('### Model Evaluation')\n    st.write('Confusion Matrix:')\n    cm = confusion_matrix(y_test, y_pred)\n    st.write(cm)\n    st.write('Classification Report:')\n    report = classification_report(y_test, y_pred, output_dict=True)\n    st.write(report)\n    st.bar_chart(report['1'])\n\n# Streamlit app\ndef main():\n    st.title('Fraud Detection Case Study')\n    st.write('This app helps you understand how to detect fraudulent transactions.')\n    data = load_data()\n    st.write('### Transaction Data')\n    st.dataframe(data)\n    st.write('### Adjust the fraud probability')\n    fraud_prob = st.slider('Fraud Probability', 0.0, 1.0, 0.1)\n    data['IsFraud'] = np.random.choice([0, 1], data.shape[0], p=[1-fraud_prob, fraud_prob])\n    st.write('### Updated Transaction Data')\n    st.dataframe(data)\n    model, X_test, y_test = train_model(data)\n    y_pred = model.predict(X_test)\n    display_results(y_test, y_pred)\n\nif __name__ == '__main__':\n    main()