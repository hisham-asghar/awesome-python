import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Sample dataset: Fake News Detection\ndata = {'text': ['This is a true news article.', 'Fake news about the election!', 'Science proves this theory wrong.', 'Unbelievable claims about health!'],\n        'label': [0, 1, 0, 1]}\ndf = pd.DataFrame(data)\n\n# Function to preprocess text\ndef preprocess_text(text):\n    return text.lower()\n\n# Preprocess the dataset\ndf['text'] = df['text'].apply(preprocess_text)\n\n# Split the dataset\nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)\n\n# Feature extraction using Bag of Words\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer()\nX_train_vectorized = vectorizer.fit_transform(X_train)\nX_test_vectorized = vectorizer.transform(X_test)\n\n# Train the model\nmodel = RandomForestClassifier()\nmodel.fit(X_train_vectorized, y_train)\n\n# Predictions\ny_pred = model.predict(X_test_vectorized)\n\n# Display results\nst.title('Fake News Detection')\nst.write('### Confusion Matrix')\ncm = confusion_matrix(y_test, y_pred)\nst.write(cm)\n\nst.write('### Classification Report')\nst.text(classification_report(y_test, y_pred))\n\n# User input for prediction\nuser_input = st.text_area('Enter a news article to classify:')\nif st.button('Classify'):\n    input_vectorized = vectorizer.transform([preprocess_text(user_input)])\n    prediction = model.predict(input_vectorized)\n    st.write('Prediction: ', 'Fake News' if prediction[0] == 1 else 'Real News')\n\n# Visualize feature importance\nimportance = model.feature_importances_\nfeatures = vectorizer.get_feature_names_out()\nindices = np.argsort(importance)[::-1]\n\n# Plotting\nplt.figure(figsize=(10, 6))\nplt.title('Feature Importance')\nplt.bar(range(len(importance)), importance[indices], align='center')\nplt.xticks(range(len(importance)), features[indices], rotation=90)\nplt.xlim([-1, len(importance)])\nplt.tight_layout()\nplt.show()\n