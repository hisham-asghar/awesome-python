import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndef load_data():\n    data = {'Symptoms': ['Fever', 'Cough', 'Fatigue', 'Loss of taste', 'Sore throat', 'Headache', 'Shortness of breath'],\n            'Disease': ['Flu', 'Flu', 'Flu', 'COVID-19', 'COVID-19', 'Cold', 'COVID-19'],\n            'Severity': [1, 1, 1, 3, 3, 2, 3]}\n    return pd.DataFrame(data)\n\n# Preprocess data\ndef preprocess_data(df):\n    df['Severity'] = df['Severity'].astype('category')\n    return df\n\n# Train model\ndef train_model(df):\n    X = df[['Symptoms']]\n    y = df['Severity']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier()\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Predict severity\ndef predict_severity(model, symptoms):\n    return model.predict([symptoms])\n\n# Main function\ndef main():\n    st.title('Disease Severity Predictor')\n    st.write('This application predicts the severity of a disease based on symptoms.')\n\n    # Load and preprocess data\n    df = load_data()\n    df = preprocess_data(df)\n\n    # Train the model\n    model, X_test, y_test = train_model(df)\n\n    # User input\n    symptoms_input = st.selectbox('Select Symptoms:', df['Symptoms'].unique())\n    if st.button('Predict Severity'):\n        severity = predict_severity(model, symptoms_input)\n        st.write(f'Predicted Severity: {severity[0]}')\n\n    # Display confusion matrix\n    if st.button('Show Confusion Matrix'):\n        y_pred = model.predict(X_test)\n        cm = confusion_matrix(y_test, y_pred)\n        st.write('Confusion Matrix:')\n        st.write(cm)\n        st.bar_chart(cm)\n\nif __name__ == '__main__':\n    main()\n