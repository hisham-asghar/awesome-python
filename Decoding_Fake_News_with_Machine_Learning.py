import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\ndataset_url = 'https://raw.githubusercontent.com/yourusername/fake_news_dataset/main/fake_news.csv'  # Replace with actual dataset URL\ndf = pd.read_csv(dataset_url)\n\n# Display dataset information\nst.title('Fake News Detection with NLP')\nst.write('This application helps you detect fake news using machine learning.')\nst.write('Dataset contains articles labeled as real or fake.')\n\n# Show dataset sample\nst.write('Sample Data:')\nst.dataframe(df.head())\n\n# User input for parameters\nst.sidebar.header('User Input Parameters')\nmax_depth = st.sidebar.slider('Max Depth of Tree', 1, 20, 5)\n\n# Preprocessing\ndf['label'] = df['label'].map({'fake': 0, 'real': 1})\nX = df['text']  # Features\ny = df['label']  # Target\n\n# Splitting the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Vectorization\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nvect = TfidfVectorizer()\nX_train_vect = vect.fit_transform(X_train)\nX_test_vect = vect.transform(X_test)\n\n# Model training\nmodel = RandomForestClassifier(max_depth=max_depth, random_state=42)\nmodel.fit(X_train_vect, y_train)\n\n# Predictions\ny_pred = model.predict(X_test_vect)\n\n# Display results\nst.write('### Model Performance')\nst.write('Confusion Matrix:')\nst.write(confusion_matrix(y_test, y_pred))\nst.write('Classification Report:')\nst.write(classification_report(y_test, y_pred))\n\n# Mini-experiment: User input for prediction\nst.sidebar.header('Make a Prediction')\nuser_input = st.sidebar.text_area('Enter news article text:')\nif st.sidebar.button('Predict'):\n    user_input_vect = vect.transform([user_input])\n    prediction = model.predict(user_input_vect)\n    result = 'Fake' if prediction[0] == 0 else 'Real'\n    st.sidebar.write(f'The article is: **{result}**')\n\n# Visualization\nlabels = ['Real', 'Fake']\nsize = [np.sum(y == 1), np.sum(y == 0)]\n\nst.write('### Distribution of Labels')\nplt.figure(figsize=(8, 5))\nplt.pie(size, labels=labels, autopct='%1.1f%%', startangle=140)\nplt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\nst.pyplot(plt)\n\n# Run the app using: streamlit run <filename>.py\n