import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load the dataset\ndef load_data():\n    # Simulated dataset for fraud detection\n    data = {\n        'TransactionID': range(1, 101),\n        'Amount': np.random.randint(10, 1000, 100),\n        'IsFraud': np.random.choice([0, 1], 100, p=[0.85, 0.15])\n    }\n    return pd.DataFrame(data)\n\n# Function to train the model\ndef train_model(data):\n    X = data[['Amount']]\n    y = data['IsFraud']\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = RandomForestClassifier(n_estimators=100)\n    model.fit(X_train, y_train)\n    return model, X_test, y_test\n\n# Function to visualize results\ndef visualize_results(y_test, y_pred):\n    cm = confusion_matrix(y_test, y_pred)\n    plt.figure(figsize=(6, 4))\n    plt.title('Confusion Matrix')\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n    plt.xlabel('Predicted')\n    plt.ylabel('Actual')\n    plt.show()\n\n# Streamlit app setup\nst.title('Fraud Detection Simulation')\n\n# Load data\ndata = load_data()\nst.write('### Transaction Data', data)\n\n# Train model button\nif st.button('Train Model'):\n    model, X_test, y_test = train_model(data)\n    st.success('Model trained successfully!')\n\n# Input for new transaction\namount = st.number_input('Enter Transaction Amount:', min_value=10, max_value=1000, value=100)\n\n# Predict button\nif st.button('Predict Fraud'):\n    prediction = model.predict([[amount]])[0]\n    if prediction == 1:\n        st.warning('This transaction is likely fraudulent!')\n    else:\n        st.success('This transaction is likely legitimate.')\n\n# Display confusion matrix after prediction\nif 'y_test' in locals():\n    y_pred = model.predict(X_test)\n    visualize_results(y_test, y_pred)\n\n# Run the app\nif __name__ == '__main__':\n    st.run()