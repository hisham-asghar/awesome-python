import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport streamlit as st\n\n# Load dataset\n@st.cache\ndef load_data():\n    data = pd.read_csv('healthcare_data.csv')  # Replace with actual dataset path\n    return data\n\n# Main function to run the app\ndef main():\n    st.title('Disease Prediction from Symptoms')\n    st.write('In this case study, we will predict diseases based on symptoms using a Random Forest Classifier.')\n\n    # Load data\n    data = load_data()\n    st.write('Dataset loaded successfully! Here are the first few rows:')\n    st.dataframe(data.head())\n\n    # Feature selection\n    st.write('Select features for prediction:')\n    features = st.multiselect('Choose symptoms:', options=data.columns[:-1])  # Assuming last column is the target\n\n    if features:\n        X = data[features]\n        y = data[data.columns[-1]]  # Target variable\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n        # Model training\n        model = RandomForestClassifier()\n        model.fit(X_train, y_train)\n        st.write('Model trained!')\n\n        # Predictions\n        predictions = model.predict(X_test)\n        st.write('Predictions made on test data.')\n\n        # Display results\n        st.write('Confusion Matrix:')\n        cm = confusion_matrix(y_test, predictions)\n        st.write(cm)\n        st.write('Classification Report:')\n        report = classification_report(y_test, predictions, output_dict=True)\n        st.write(report)\n\n        # Visualize results\n        st.write('Visualizing the results:')\n        fig, ax = plt.subplots()\n        ax.matshow(cm, cmap=plt.cm.Blues)\n        plt.title('Confusion Matrix')\n        plt.xlabel('Predicted')\n        plt.ylabel('True')\n        st.pyplot(fig)\n\n        # Mini-experiment\n        st.write('Try tweaking the parameters!')\n        n_estimators = st.slider('Number of Estimators:', min_value=1, max_value=100, value=10)\n        model = RandomForestClassifier(n_estimators=n_estimators)\n        model.fit(X_train, y_train)\n        predictions = model.predict(X_test)\n        st.write('New predictions made with {} estimators.'.format(n_estimators))\n        new_cm = confusion_matrix(y_test, predictions)\n        st.write('New Confusion Matrix:')\n        st.write(new_cm)\n\nif __name__ == '__main__':\n    main()\n